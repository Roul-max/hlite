# Frontend Environment Variables
VITE_API_URL=http://localhost:5000/api
VITE_GOOGLE_CLIENT_ID=your-google-client-id
</parameter>

<parameter name="filePath">README.md</parameter>
# 🚀 Auth Notes App

A full-stack authentication and notes management application built with modern technologies and beautiful design.

## 🛠️ Tech Stack

### Frontend
- **React 18** with JavaScript (JSX)
- **Vite** for fast development and building
- **TailwindCSS** for responsive styling
- **React Router** for navigation
- **Axios** for API calls
- **Lucide React** for icons

### Backend
- **Node.js** with Express.js
- **MongoDB** with Mongoose ODM
- **JWT** for authentication
- **Nodemailer** for email services
- **bcryptjs** for password hashing
- **Express Validator** for input validation

## ✨ Features

### Authentication
- **Email + OTP Flow**: Secure signup with email verification
- **Google OAuth**: Social login integration (configurable)
- **JWT Security**: Token-based authentication with automatic refresh
- **Password Security**: Bcrypt hashing with salt rounds
- **Rate Limiting**: Protection against brute force attacks

### Notes Management
- **CRUD Operations**: Create, read, update, delete notes
- **Real-time Search**: Filter notes by title and content
- **Categories**: Organize notes with custom categories
- **Responsive Design**: Optimized for mobile and desktop
- **User Dashboard**: Professional interface with user profile

### Security Features
- **Protected Routes**: JWT middleware protection
- **Input Validation**: Comprehensive form and API validation
- **Error Handling**: Graceful error handling with user feedback
- **CORS Configuration**: Secure cross-origin requests
- **Helmet Security**: Additional HTTP security headers

## 🚀 Quick Start

### Prerequisites
- **Node.js** (v18 or higher)
- **MongoDB** (local or cloud instance)
- **npm** or **yarn**

### Installation

1. **Clone and setup the project**:
```bash
git clone <repository-url>
cd auth-notes-app
```

2. **Install frontend dependencies**:
```bash
npm install
```

3. **Install backend dependencies**:
```bash
cd backend
npm install
cd ..
```

4. **Environment Setup**:

Copy the example environment files:
```bash
cp .env.example .env
cp backend/.env.example backend/.env
```

Update the environment variables:

**Frontend (.env)**:
```env
VITE_API_URL=http://localhost:5000/api
VITE_GOOGLE_CLIENT_ID=your-google-client-id
```

**Backend (backend/.env)**:
```env
MONGODB_URI=mongodb://localhost:27017/auth-notes-app
JWT_SECRET=your-super-secret-jwt-key-here
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
FROM_EMAIL=noreply@notesapp.com
NODE_ENV=development
PORT=5000
FRONTEND_URL=http://localhost:5173
```

### Development

1. **Start MongoDB** (if running locally):
```bash
mongod
```

2. **Start the backend server**:
```bash
cd backend
npm run dev
```

3. **Start the frontend** (in a new terminal):
```bash
npm run dev
```

The application will be available at:
- **Frontend**: http://localhost:5173
- **Backend**: http://localhost:5000

## 📧 Email Configuration

For email functionality, you'll need to configure SMTP settings:

### Gmail Setup
1. Enable 2-factor authentication on your Gmail account
2. Generate an app-specific password
3. Use these credentials in your `.env` file

### Other Email Providers
Update the SMTP settings in `backend/.env` according to your provider's documentation.

## 🌐 Deployment

### Frontend Deployment (Vercel/Netlify)

**Vercel**:
```bash
npm run build
npx vercel --prod
```

**Netlify**:
```bash
npm run build
# Upload the `dist` folder to Netlify or use Netlify CLI
```

### Backend Deployment (Render/Railway/Heroku)

**Render**:
1. Connect your GitHub repository
2. Set the build command: `cd backend && npm install`
3. Set the start command: `cd backend && npm start`
4. Configure environment variables

**Railway**:
```bash
cd backend
railway login
railway init
railway up
```

**Heroku**:
```bash
cd backend
heroku create your-app-name
git subtree push --prefix=backend heroku main
```

### Database Deployment

**MongoDB Atlas**:
1. Create a cluster at https://cloud.mongodb.com
2. Get your connection string
3. Update `MONGODB_URI` in your deployed backend

## 🏗️ Project Structure

```
auth-notes-app/
├── src/
│   ├── components/          # Reusable UI components
│   ├── contexts/            # React Context providers
│   ├── pages/               # Page components
│   └── services/            # API service layer
├── backend/
│   ├── models/              # MongoDB models
│   ├── routes/              # Express route handlers
│   ├── middleware/          # Custom middleware
│   ├── services/            # Business logic services
│   └── server.js            # Entry point
└── docs/                    # Documentation
```

## 🔒 Security Features

- **JWT Authentication** with secure token storage
- **Password Hashing** using bcryptjs
- **OTP Verification** for email confirmation
- **Rate Limiting** to prevent abuse
- **Input Validation** on both frontend and backend
- **CORS Protection** for secure API access
- **Helmet Security** for additional HTTP headers

## 🧪 Testing

Run the development servers and test the following flows:

1. **Signup Flow**: Create account → Receive OTP → Verify → Login
2. **Login Flow**: Email/password → Dashboard access
3. **Notes Management**: Create → Read → Update → Delete
4. **Authentication**: Protected routes, token expiration handling

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Commit changes: `git commit -am 'Add feature'`
4. Push to branch: `git push origin feature-name`
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

## 🔗 Live Demo

- **Frontend**: [To be deployed]
- **Backend**: [To be deployed]

---

Built with ❤️ using React, Node.js, and MongoDB